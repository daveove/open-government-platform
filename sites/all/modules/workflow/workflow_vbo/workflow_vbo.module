<?php
/**
 * @file
 * Provide workflow actions for VBO.
 * Split out from workflow_actions.
 */

/**
 * Implements hook_action_info().
 */
function workflow_vbo_action_info() {
  return array(
    'workflow_vbo_next_state_action' => array(
      'type' => 'node',
      'label' => t('Change workflow state of post to next state'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),

    'workflow_vbo_given_state_action' => array(
      'type' => 'node',
      'label' => t('Change workflow state of post to new state'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Implements a Drupal action. Move a node to the next state in the workflow.
 */
function workflow_vbo_next_state_action($node, array $context) {
  global $user;

  // If this action is being fired because it's attached to a workflow transition
  // then the node's new state (now its current state) should be in $node->workflow
  // because that is where the value from the workflow form field is stored;
  // otherwise the current state is placed in $node->workflow by our nodeapi load.
  if (!isset($node->nid)) {
    watchdog('workflow_vbo', 'Unable to get current node id state of node - node is not yet saved.');
    return;
  }
  if (!isset($node->workflow)) {
    watchdog('workflow_vbo', 'Unable to get current workflow state of node %nid.',
      array('%nid' => $node->nid));
    return;
  }

  $entity_type = 'node'; // @todo: extend workflow_vbo to support Field API.
  $entity = $node;
  $current_sid = $node->workflow;
  $current_state = WorkflowState::load($current_sid);

  // Get the node's new state (which is the next available state).
  $new_sid = $current_sid;
  $options = $current_state->getOptions($entity_type, $entity);
  $flag = FALSE;
  foreach ($options as $sid => $name) {
    if ($flag) {
      $new_sid = $sid;
      break;
    }
    if ($sid == $current_sid) {
      $flag = TRUE;
    }
  }

  // Fire the transition.
  $field_name = '';
  $comment = '';
  $force = FALSE;
  $transition = new WorkflowTransition($entity_type, $entity, $field_name, $current_sid, $new_sid, $user->uid, REQUEST_TIME, $comment);
  workflow_execute_transition($entity_type, $entity, $field_name, $transition, $force);
}

/**
 * Implements a Drupal action. Move a node to a specified state.
 */
function workflow_vbo_given_state_action($node, array $context) {
  global $user;
  if (!isset($node->nid)) {
    watchdog('workflow_vbo', 'Unable to get current node id state of node - node is not yet saved.');
    return;
  }

  $force = $context['force'];

  $form = $context['form'];
  $form_state = $context['form_state'];

  // The initial form was a VBO form, so add the entity.
  $form_state['values']['workflow_entity'] = $node;

  // Parse the $comment variables.
  $new_sid = $form_state['input']['workflow_sid'];
  $comment_string = $form_state['input']['workflow_comment'];
  $comment = t($comment_string, array(
      '%title' => check_plain($node->title),
      '%state' => workflow_get_sid_label($new_sid),
      '%user' => theme('username', array('account' => $user)),
    )
  );
  $form_state['input']['workflow_comment'] = $comment;

  // Submit the transition.
  workflow_transition_form_submit($form, $form_state);
}

/**
 * Configuration form for "Change workflow state of post to new state" action.
 *
 * This copies functionality from workflow_tab_page, and overrides some fields.
 *
 * @see workflow_vbo_given_state_action()
 */
function workflow_vbo_given_state_action_form(array $context) {
  $form = array();
  $options = array();

  // The following is a copy of function workflow_tab_page(), to re-use the form.
  // This way, we can add comments, and schedule the form.

  // First, create dummy data. // @todo: improve this logic, Add $workflow, $field_name.
  $entity_type = 'node';
  $entity = NULL;
  $entity_id = '';
  $workflow = Workflow::create('dummy VBO');
  // Set some workflow options, that are normally fetched from the workflow.
  $workflow->options['comment_log_tab'] = TRUE; 
  $workflow->options['schedule'] = TRUE;
  $workflow->options['schedule_timezone'] = TRUE;
  $workflow->options['watchdog_log'] = TRUE;
  $workflow->options['options'] = 'select';

  // Show the current state and the Workflow form to allow state changing.
  if ($workflow_item = $workflow->getWorkflowItem()) {
    // This is a Workflow Field workflow.
    $field = $workflow_item->getField();
    $instance = $workflow_item->getInstance();
  }
  else {
    // This is a Workflow Node workflow.
    // Emulate a Field API interface.
    $field = array();
    $field['field_name'] = '';
    $field['id'] = 0;
    $field['settings']['wid'] = $workflow->wid;
    $field['settings']['widget'] = $workflow->options;
    // Careful: the following line is different from workflow_tab_page()
    $field['settings']['widget']['comment'] = $workflow->options['comment_log_tab']; // vs. ['comment_log_node']; 

    $field['settings']['widget']['current_status'] = FALSE;

    $instance = array();
    // Do not show the submit button on the VBO page.
    $instance['widget']['settings']['submit_function'] = '';
  }
  // Add the form/widget to the formatter, and include the nid and field_id in the form id,
  // to allow multiple forms per page (in listings, with hook_forms() ).
  // Ultimately, this is a wrapper for WorkflowDefaultWidget.
  $field_id = $field['id'];
  $form['workflow_current_state'] = workflow_state_formatter($entity_type, $entity, $field, $instance);
  $form += drupal_get_form(implode('_', array('workflow_transition_form', $entity_type, $entity_id, $field_id)), $field, $instance, $entity_type, $entity);

  // Make adaptations for VBO-form:

  // Change the options widget. Get all states, only where active.
  // @todo: prevent choosing a state from an illegal Workflow.
  $options = workflow_get_workflow_state_names(0, $grouped = ($workflow->options['options'] == 'select'), $all = FALSE);

  // Override the options widget.
  $form['workflow']['workflow_sid']['#type'] = 'select';
  $form['workflow']['workflow_sid']['#title'] = t('Target state');
  $form['workflow']['workflow_sid']['#description'] = t('Please select the state that should be assigned when this action runs.');
  $form['workflow']['workflow_sid']['#default_value'] = isset($context['target_sid']) ? $context['target_sid'] : '';
  $form['workflow']['workflow_sid']['#options'] = $options;

  $form['workflow']['workflow_force'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force transition'),
    '#description' => t('If this box is checked, the new state will be assigned even if workflow permissions disallow it.'),
    '#default_value' => isset($context['force']) ? $context['force'] : '',
  );

  $form['workflow']['workflow_comment'] = array(
    '#type' => 'textfield',
    '#title' => t('Message'),
    '#description' => t('This message will be written into the workflow history log when the action
      runs. You may include the following variables: %state, %title, %user.'),
    '#default_value' => isset($context['workflow_history']) ? $context['workflow_history'] : t('Action set %title to %state by %user.'),
  );

  return $form;
}

/**
 * Submit handler for "Change workflow state of post to new state" action
 * configuration form.
 *
 * @see workflow_vbo_given_state_action_form()
 */
function workflow_vbo_given_state_action_submit($form, $form_state) {
  $new_sid = $form_state['input']['workflow_sid'];
  if (!$new_sid) {
    return;
  }

  return array(
    'force' => $form_state['input']['workflow_force'],
    'form' => $form,
    'form_state' => $form_state,
  );
}
