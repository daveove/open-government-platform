<?php
	include_once('ext/ckan-client/Ckan_client.php');

	define("CKAN_API_KEY", "62916618-dd10-4037-8368-5e3e129cbc16");
	define("ROLE_ADMIN", "3");
	define("ROLE_EDITOR", "4");

    /**
     * @file
     * This module provides tools for integrating DataGovPh's Drupal component with the corresponding CKAN instance
     */

	/**
     * Implements hook_menu
     */
    function dgph_ckan_menu() {
        $items['dataset/autocomplete'] = array(
            'page callback' => 'dataset_autocomplete',
            'access arguments' => array('post comments')
        );
        return $items;
    }
	/**
	 * Datasets autocomplete helper
	 * @param $search the search string
	 */
	function dataset_autocomplete($search = null) {
  		$matches = array();
		if ($search!=null && strlen($search)>=2) {
			db_set_active('ckan');
	  		$res = db_select('public.package', 'p')
				->fields('p', array('name', 'title'))
					->condition('state', 'active')
					->condition('private', false)
			  		->condition('title', '%'.db_like($search).'%', 'LIKE')
			  		->execute();
			db_set_active();
	  		// gets matches
	  		foreach ($res as $row) {
				$matches[$row->name] = check_plain($row->title);
	  		}
		}
  		// return the result to the form in json
  		drupal_json_output($matches);
	}

    /**
     * Implements user_login hook
     */
    function dgph_ckan_user_login(&$edit, $account) {
        // set user login cookie for CKAN
	setcookie('drupal_username', $account->name, time() + 3600*24*7, '/');
    }

    /**
     * Implemets user_logout hook
     */
    function dgph_ckan_user_logout($account) {
        // clear user login cookie for CKAN
	setcookie('drupal_username', 'guest', time() + 3600*24*7, '/');
    }

	/**
     * Implements user_insert hook
     */
    function dgph_ckan_user_insert(&$edit, $account, $category) {
        // gets new user info
		$uname = $edit['name'];
		$email = $edit['mail'];
		$firstName = $edit['field_first_name']['und'][0]['value'];
		$lastName = $edit['field_last_name']['und'][0]['value'];
		// creates the corresponding CKAN user
		watchdog('dgph_ckan', "Creating CKAN user for $uname ...", array(), WATCHDOG_DEBUG);
		$ckan = new Ckan_client(CKAN_API_KEY);
		$params = array(
				'name' => $uname,
				'email' => $email,
				'password' => $uname.'_dgph_ckan_12',
				'fullname' => "$firstName $lastName"
			);
		try {
			$res = $ckan->create_user($params);
			if ($res) {
				watchdog('dgph_ckan', "CKAN user for $uname has been created!", array(), WATCHDOG_DEBUG);
			}
			else {
				watchdog('dgph_ckan', "Failed to create CKAN user for $uname!", array(), WATCHDOG_DEBUG);		
			}
		}
		catch(Exception $e) {
			watchdog('dgph_ckan', "Failed to create CKAN user for $uname: %msg!", 
				array('%msg' => $e->getMessage()), WATCHDOG_DEBUG);
		}
    }


    /**
     * Implements user_update hook
     */
    function dgph_ckan_user_update(&$edit, $account, $category) {
		$orgName = $account->original->name;
		$uname = $edit['name'];
		$email = $edit['mail'];
		$firstName = $edit['field_first_name']['und'][0]['value'];
		$lastName = $edit['field_last_name']['und'][0]['value'];
		// updates the corresponding CKAN user
		watchdog('dgph_ckan', "Updating CKAN user for $uname [formerly $orgName]...", array(), WATCHDOG_DEBUG);
		$ckan = new Ckan_client(CKAN_API_KEY);
		$params = array(
				'id' => $orgName,
				'name' => $uname,
				'email' => $email,
				'password' => $uname.'_dgph_ckan_12',
				'fullname' => "$firstName $lastName"
			);
		try {
			$res = $ckan->update_user($params);
			if ($res) {
				watchdog('dgph_ckan', "CKAN user for $uname has been updated!", array(), WATCHDOG_DEBUG);
				$roles = $edit['roles'];
				$sysadmin = 0;
				watchdog('dgph_ckan', "CKAN user for $uname has been updated!", array(), WATCHDOG_DEBUG);
				if (in_array(ROLE_ADMIN, $roles, TRUE) || in_array(ROLE_EDITOR, $roles, TRUE)) {
					$sysadmin = 1;
				}
				// updates CKAN user role
				db_set_active('ckan');
				db_update('public.user')
					->fields(array('sysadmin' => $sysadmin))
					  ->condition('name', $uname)
					  ->execute();
				db_set_active();
				watchdog('dgph_ckan', "CKAN user for $uname is now a ".(($sysadmin) ? "SYSADMIN" : "REGULAR USER")."!", array(), WATCHDOG_DEBUG);
			}
			else {
				watchdog('dgph_ckan', "Failed to update CKAN user for $uname!", array(), WATCHDOG_DEBUG);		
			}
		}
		catch(Exception $e) {
			watchdog('dgph_ckan', "Failed to update CKAN user for $uname: %msg!", 
				array('%msg' => $e->getMessage()), WATCHDOG_DEBUG);
		}
    }    

    /**
     * Alter forms for content types which links to CKAN entities
     */
    function dgph_ckan_form_alter(&$form, &$form_state, $form_id) {
            if (isset($form['type']) && isset($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id) {
            $form['field_uses_dataset']['und'][0]['value']['#autocomplete_path'] = 'dataset/autocomplete';
            }
    }
    /**
     * Load the list of favorite datasets for current user
     */
   function dgph_ckan_get_favorite_datasets() {
        $favs = array();
        
        global $user;
        $uname = $user->name;
        db_set_active('ckan');
        $query = db_select('public.package', 'p')
                    ->fields('p', array('title', 'notes', 'name'));
        $query->join('public.user_favorites', 'f', 'f.object_id = p.id');           
        $query->join('public.user', 'u', 'f.user_id = u.id');
        $res = $query->condition('u.name', $uname)
                     ->execute();
        db_set_active();
        foreach ($res as $row) {
            $favs[] = array(
                    'name' => $row->name,
                    'title' => $row->title,
                    'notes' => $row->notes
                );
        }
        return $favs;
   }
   /**
     * Load the list of viewed datasets for current user
     */
   function dgph_ckan_get_viewed_datasets() {
        $views = array();
        global $user;
        $uname = $user->name;
        db_set_active('ckan');
        $query = db_select('public.package', 'p')
                    ->fields('p', array('title', 'notes', 'name'));
        $query->join('public.tracking_raw', 't', 't.url = p.name');
        $res = $query->fields('t', array('user_key', 'access_timestamp'))
                     ->condition('t.user_key', $uname)
                     ->orderBy('t.access_timestamp', 'desc')
                     ->execute();
        db_set_active();
        foreach ($res as $row) {
            $views[] = array(
                    'user_name' => $row->user_key,
                    'name' => $row->name,
                    'title' => $row->title,
                    'notes' => $row->notes,
                    'tm' => $row->access_timestamp
                );
        }
        return $views;
   }



